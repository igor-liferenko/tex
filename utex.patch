@@ -346,9 +346,11 @@
 #include <stdlib.h>
 #include <string.h>
 #include <math.h>
+#include <wchar.h>
+#include <locale.h>
 
 #define odd(X)       ((X)&1)
-#define chr(X)       ((unsigned char)(X))
+#define chr(X)       (X) /* fix ctex.patch */
 #define ord(X)       ((int)(X))
 #define abs(X)       ((X)>-(X)?(X):-(X))
 #define round(X)     ((int)((X)>=0.0?floor((X)+0.5):ceil((X)-0.5)))
@@ -569,9 +571,9 @@
 adjusted if necessary.
 @^system dependencies@>
 
-@d text_char	unsigned char /*the data type of characters in text files*/ 
+@d text_char	wchar_t /*the data type of characters in text files*/ 
 @d first_text_char	0 /*ordinal number of the smallest element of |text_char|*/ 
-@d last_text_char	255 /*ordinal number of the largest element of |text_char|*/ 
+@d last_text_char	65535 /*ordinal number of the largest element of |text_char|*/ 
 
 @<Local variables for init...@>=
 int @!i;
@@ -581,9 +583,9 @@
 that are analogous to \PASCAL's |ord| and |chr| functions.
 
 @<Glob...@>=
-ASCII_code @!xord[256];
+ASCII_code @!xord[65536];
    /*specifies conversion of input characters*/ 
-uint8_t @!xchr[256];
+text_char @!xchr[256]; /* fix web2w */
    /*specifies conversion of output characters*/ 
 
 @ Since we are assuming that our \PASCAL\ system is able to read and
@@ -729,6 +731,7 @@
 @<Set init...@>=
 for (i=0; i<=037; i++) xchr[i]= ' ' ;
 for (i=0177; i<=0377; i++) xchr[i]= ' ' ;
+@i mapping.w
 
 @ The following system-independent code makes the |xord| array contain a
 suitable inverse to the information in |xchr|. Note that if |xchr[i]==xchr[j]|
@@ -826,7 +829,7 @@
 
 @p bool a_open_in(alpha_file *f)
    /*open a text file for input*/ 
-{@+reset((*f), name_of_file,"r");return reset_OK((*f));
+{ if ((f->f=fopen(name_of_file+1,"r"))!=NULL) f->d=fgetwc(f->f); return reset_OK(*f);
 } 
 @#
 bool a_open_out(alpha_file *f)
@@ -941,7 +944,7 @@
 @p bool input_ln(alpha_file *f, bool @!bypass_eoln)
    /*inputs the next line or returns |false|*/ 
 {@+uint16_t last_nonblank; /*|last| with trailing blanks removed*/ 
-if (bypass_eoln) if (!eof((*f))) get((*f));
+if (bypass_eoln) if (!eof(*f)) f->d=fgetwc(f->f);
    /*input the first character of the line into |f.d|*/ 
 last=first; /*cf.\ Matthew 19\thinspace:\thinspace30*/ 
 if (eof((*f))) return false;
@@ -952,7 +955,7 @@
       if (max_buf_stack==buf_size) 
         @<Report overflow of the input buffer, and abort@>;
       } 
-    buffer[last]=xord[(*f).d];get((*f));incr(last);
+    buffer[last]=xord[(*f).d];f->d=fgetwc(f->f);incr(last);
     if (buffer[last-1]!=' ') last_nonblank=last;
     } 
   last=last_nonblank;return true;
@@ -1502,7 +1505,7 @@
   {@+print_ln();return;
   } 
 switch (selector) {
-case term_and_log: {@+wterm("%c",xchr[s]);wlog("%c",xchr[s]);
+case term_and_log: {@+wterm("%lc",xchr[s]);wlog("%lc",xchr[s]);
   incr(term_offset);incr(file_offset);
   if (term_offset==max_print_line) 
     {@+wterm_cr;term_offset=0;
@@ -1511,17 +1514,17 @@
     {@+wlog_cr;file_offset=0;
     } 
   } @+break;
-case log_only: {@+wlog("%c",xchr[s]);incr(file_offset);
+case log_only: {@+wlog("%lc",xchr[s]);incr(file_offset);
   if (file_offset==max_print_line) print_ln();
   } @+break;
-case term_only: {@+wterm("%c",xchr[s]);incr(term_offset);
+case term_only: {@+wterm("%lc",xchr[s]);incr(term_offset);
   if (term_offset==max_print_line) print_ln();
   } @+break;
 case no_print: do_nothing;@+break;
 case pseudo: if (tally < trick_count) trick_buf[tally%error_line]=s;@+break;
 case new_string: {@+if (pool_ptr < pool_size) append_char(s);
   } @+break; /*we drop characters if the string space is full*/ 
-default:write(write_file[selector],"%c", xchr[s]);
+default:write(write_file[selector],"%lc", xchr[s]);
 } @/
 incr(tally);
 } 
@@ -10123,9 +10126,16 @@
 allows both lowercase and uppercase letters in the file name.
 @^system dependencies@>
 
-@d append_to_name(X)	{@+c=X;incr(k);
-  if (k <= file_name_size) name_of_file[k]=xchr[c];
-  } 
+@d append_to_name(X)	{@+c=X;
+  if (k >= 0) {
+    char mb[MB_CUR_MAX];
+    int len = wctomb(mb, xchr[c]);
+    if (k+len <= file_name_size)
+      for (int i = 0; i < len; i++) name_of_file[++k] = mb[i];
+    else
+      k = -k;
+  }
+}
 
 @p void pack_file_name(str_number @!n, str_number @!a, str_number @!e)
 {@+int k; /*number of positions filled in |name_of_file|*/ 
@@ -10135,6 +10145,7 @@
 for (j=str_start[a]; j<=str_start[a+1]-1; j++) append_to_name(so(str_pool[j]));
 for (j=str_start[n]; j<=str_start[n+1]-1; j++) append_to_name(so(str_pool[j]));
 for (j=str_start[e]; j<=str_start[e+1]-1; j++) append_to_name(so(str_pool[j]));
+if (k < 0) k = -k;
 if (k <= file_name_size) name_length=k;@+else name_length=file_name_size;
 name_of_file[name_length+1]=0;
 } 
@@ -10151,13 +10162,16 @@
 @d format_extension_str ".fmt" /*the extension, as a \.{WEB} constant*/ 
 
 @<Glob...@>=
-ASCII_code @!TEX_format_default[1+format_default_length+1]=" TeXformats/plain.fmt";
+wchar_t @!TEX_format_default0[format_default_length+1], *const @!TEX_format_default = @!TEX_format_default0-1;
+
+@ @<Set init...@>=
+wcscpy(TEX_format_default+1, L"TeXformats/plain.fmt");
 @.TeXformats@>
 @.plain@>
 @^system dependencies@>
 
 @ @<Check the ``constant'' values for consistency@>=
-if (format_default_length > file_name_size) bad=31;
+if (wcstombs(NULL,TEX_format_default+1,0) > file_name_size) bad=31;
 
 @ Here is the messy routine that was just mentioned. It sets |name_of_file|
 from the first |n| characters of |TEX_format_default|, followed by
@@ -10174,11 +10188,16 @@
 {@+int k; /*number of positions filled in |name_of_file|*/ 
 ASCII_code @!c; /*character being packed*/ 
 int @!j; /*index into |buffer| or |TEX_format_default|*/ 
-if (n+b-a+1+format_ext_length > file_name_size) 
-  b=a+file_name_size-n-1-format_ext_length;
 k=0;
 for (j=1; j<=n; j++) append_to_name(xord[TEX_format_default[j]]);
 for (j=a; j<=b; j++) append_to_name(buffer[j]);
+if (k < 0) k = -k;
+while (k+wcstombs(NULL,TEX_format_default+format_default_length
+       -format_ext_length+1,0) > file_name_size) {
+  k--;
+  while(mblen(name_of_file+k+1, MB_CUR_MAX)==-1)
+    k--;
+}
 for (j=format_default_length-format_ext_length+1; j<=format_default_length; j++) 
   append_to_name(xord[TEX_format_default[j]]);
 if (k <= file_name_size) name_length=k;@+else name_length=file_name_size;
@@ -10237,7 +10256,11 @@
 if ((pool_ptr+name_length > pool_size)||(str_ptr==max_strings)||
  (cur_length > 0)) 
   return'?';
-else{@+for (k=1; k<=name_length; k++) append_char(xord[name_of_file[k]]);
+else{@+for (k=1; k<=name_length; k++) {
+      wchar_t wc;
+      k += mbtowc(&wc, name_of_file+k, MB_CUR_MAX) - 1;
+      append_char(xord[wc]);
+    }
   return make_string();
   } 
 } 
@@ -24321,6 +24345,7 @@
 @^system dependencies@>
 
 @p int main(void) {@! /*|start_here|*/ 
+setlocale(LC_CTYPE, "C.UTF-8");
 history=fatal_error_stop; /*in case we quit during initialization*/ 
 t_open_out; /*open the terminal for output*/ 
 if (ready_already==314159) goto start_of_TEX;
